# JMH version: 1.23
# VM version: JDK 18.0.1, OpenJDK 64-Bit Server VM, 18.0.1+10-24
# VM invoker: D:\app\JDK_\bin\java.exe
# VM options: -javaagent:C:\Users\progressive\AppData\Local\JetBrains\Toolbox\apps\IDEA-U\ch-0\223.6646.99\lib\idea_rt.jar=64965:C:\Users\progressive\AppData\Local\JetBrains\Toolbox\apps\IDEA-U\ch-0\223.6646.99\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.hashmapiteration.iterationUtil.useEntrySet

# Run progress: 0.00% complete, ETA 00:00:49
# Fork: 1 of 1
# Warmup Iteration   1: 1.008 ns/op
# Warmup Iteration   2: 0.955 ns/op
Iteration   1: 0.952 ns/op
Iteration   2: 0.969 ns/op
Iteration   3: 1.022 ns/op
Iteration   4: 1.002 ns/op
Iteration   5: 0.958 ns/op


Result "org.example.hashmapiteration.iterationUtil.useEntrySet":
  0.981 ±(99.9%) 0.116 ns/op [Average]
  (min, avg, max) = (0.952, 0.981, 1.022), stdev = 0.030
  CI (99.9%): [0.865, 1.097] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 18.0.1, OpenJDK 64-Bit Server VM, 18.0.1+10-24
# VM invoker: D:\app\JDK_\bin\java.exe
# VM options: -javaagent:C:\Users\progressive\AppData\Local\JetBrains\Toolbox\apps\IDEA-U\ch-0\223.6646.99\lib\idea_rt.jar=64965:C:\Users\progressive\AppData\Local\JetBrains\Toolbox\apps\IDEA-U\ch-0\223.6646.99\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.hashmapiteration.iterationUtil.useForEach

# Run progress: 14.29% complete, ETA 00:00:47
# Fork: 1 of 1
# Warmup Iteration   1: 0.961 ns/op
# Warmup Iteration   2: 0.962 ns/op
Iteration   1: 0.956 ns/op
Iteration   2: 0.955 ns/op
Iteration   3: 0.949 ns/op
Iteration   4: 0.950 ns/op
Iteration   5: 0.949 ns/op


Result "org.example.hashmapiteration.iterationUtil.useForEach":
  0.952 ±(99.9%) 0.014 ns/op [Average]
  (min, avg, max) = (0.949, 0.952, 0.956), stdev = 0.004
  CI (99.9%): [0.938, 0.966] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 18.0.1, OpenJDK 64-Bit Server VM, 18.0.1+10-24
# VM invoker: D:\app\JDK_\bin\java.exe
# VM options: -javaagent:C:\Users\progressive\AppData\Local\JetBrains\Toolbox\apps\IDEA-U\ch-0\223.6646.99\lib\idea_rt.jar=64965:C:\Users\progressive\AppData\Local\JetBrains\Toolbox\apps\IDEA-U\ch-0\223.6646.99\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.hashmapiteration.iterationUtil.useForEachEntryKey

# Run progress: 28.57% complete, ETA 00:00:39
# Fork: 1 of 1
# Warmup Iteration   1: 1.093 ns/op
# Warmup Iteration   2: 1.081 ns/op
Iteration   1: 1.267 ns/op
Iteration   2: 1.073 ns/op
Iteration   3: 1.077 ns/op
Iteration   4: 1.073 ns/op
Iteration   5: 1.080 ns/op


Result "org.example.hashmapiteration.iterationUtil.useForEachEntryKey":
  1.114 ±(99.9%) 0.329 ns/op [Average]
  (min, avg, max) = (1.073, 1.114, 1.267), stdev = 0.086
  CI (99.9%): [0.785, 1.443] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 18.0.1, OpenJDK 64-Bit Server VM, 18.0.1+10-24
# VM invoker: D:\app\JDK_\bin\java.exe
# VM options: -javaagent:C:\Users\progressive\AppData\Local\JetBrains\Toolbox\apps\IDEA-U\ch-0\223.6646.99\lib\idea_rt.jar=64965:C:\Users\progressive\AppData\Local\JetBrains\Toolbox\apps\IDEA-U\ch-0\223.6646.99\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.hashmapiteration.iterationUtil.useKeySet

# Run progress: 42.86% complete, ETA 00:00:31
# Fork: 1 of 1
# Warmup Iteration   1: 1.076 ns/op
# Warmup Iteration   2: 1.087 ns/op
Iteration   1: 1.504 ns/op
Iteration   2: 1.059 ns/op
Iteration   3: 1.128 ns/op
Iteration   4: 1.150 ns/op
Iteration   5: 1.385 ns/op


Result "org.example.hashmapiteration.iterationUtil.useKeySet":
  1.245 ±(99.9%) 0.731 ns/op [Average]
  (min, avg, max) = (1.059, 1.245, 1.504), stdev = 0.190
  CI (99.9%): [0.514, 1.976] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 18.0.1, OpenJDK 64-Bit Server VM, 18.0.1+10-24
# VM invoker: D:\app\JDK_\bin\java.exe
# VM options: -javaagent:C:\Users\progressive\AppData\Local\JetBrains\Toolbox\apps\IDEA-U\ch-0\223.6646.99\lib\idea_rt.jar=64965:C:\Users\progressive\AppData\Local\JetBrains\Toolbox\apps\IDEA-U\ch-0\223.6646.99\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.hashmapiteration.iterationUtil.useLambda

# Run progress: 57.14% complete, ETA 00:00:23
# Fork: 1 of 1
# Warmup Iteration   1: 0.587 ns/op
# Warmup Iteration   2: 0.621 ns/op
Iteration   1: 0.614 ns/op
Iteration   2: 0.588 ns/op
Iteration   3: 0.597 ns/op
Iteration   4: 0.591 ns/op
Iteration   5: 0.583 ns/op


Result "org.example.hashmapiteration.iterationUtil.useLambda":
  0.595 ±(99.9%) 0.045 ns/op [Average]
  (min, avg, max) = (0.583, 0.595, 0.614), stdev = 0.012
  CI (99.9%): [0.549, 0.640] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 18.0.1, OpenJDK 64-Bit Server VM, 18.0.1+10-24
# VM invoker: D:\app\JDK_\bin\java.exe
# VM options: -javaagent:C:\Users\progressive\AppData\Local\JetBrains\Toolbox\apps\IDEA-U\ch-0\223.6646.99\lib\idea_rt.jar=64965:C:\Users\progressive\AppData\Local\JetBrains\Toolbox\apps\IDEA-U\ch-0\223.6646.99\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.hashmapiteration.iterationUtil.useParallelStream

# Run progress: 71.43% complete, ETA 00:00:15
# Fork: 1 of 1
# Warmup Iteration   1: 50.498 ns/op
# Warmup Iteration   2: 49.144 ns/op
Iteration   1: 46.706 ns/op
Iteration   2: 35.835 ns/op
Iteration   3: 31.495 ns/op
Iteration   4: 40.005 ns/op
Iteration   5: 31.593 ns/op


Result "org.example.hashmapiteration.iterationUtil.useParallelStream":
  37.127 ±(99.9%) 24.661 ns/op [Average]
  (min, avg, max) = (31.495, 37.127, 46.706), stdev = 6.404
  CI (99.9%): [12.466, 61.788] (assumes normal distribution)


# JMH version: 1.23
# VM version: JDK 18.0.1, OpenJDK 64-Bit Server VM, 18.0.1+10-24
# VM invoker: D:\app\JDK_\bin\java.exe
# VM options: -javaagent:C:\Users\progressive\AppData\Local\JetBrains\Toolbox\apps\IDEA-U\ch-0\223.6646.99\lib\idea_rt.jar=64965:C:\Users\progressive\AppData\Local\JetBrains\Toolbox\apps\IDEA-U\ch-0\223.6646.99\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Warmup: 2 iterations, 1 s each
# Measurement: 5 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.hashmapiteration.iterationUtil.useStream

# Run progress: 85.71% complete, ETA 00:00:07
# Fork: 1 of 1
# Warmup Iteration   1: 24.194 ns/op
# Warmup Iteration   2: 19.501 ns/op
Iteration   1: 16.213 ns/op
Iteration   2: 18.170 ns/op
Iteration   3: 18.116 ns/op
Iteration   4: 16.577 ns/op
Iteration   5: 16.513 ns/op


Result "org.example.hashmapiteration.iterationUtil.useStream":
  17.118 ±(99.9%) 3.642 ns/op [Average]
  (min, avg, max) = (16.213, 17.118, 18.170), stdev = 0.946
  CI (99.9%): [13.476, 20.760] (assumes normal distribution)


# Run complete. Total time: 00:00:55

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                         Mode  Cnt   Score    Error  Units
iterationUtil.useEntrySet         avgt    5   0.981 ±  0.116  ns/op
iterationUtil.useForEach          avgt    5   0.952 ±  0.014  ns/op
iterationUtil.useForEachEntryKey  avgt    5   1.114 ±  0.329  ns/op
iterationUtil.useKeySet           avgt    5   1.245 ±  0.731  ns/op
iterationUtil.useLambda           avgt    5   0.595 ±  0.045  ns/op
iterationUtil.useParallelStream   avgt    5  37.127 ± 24.661  ns/op
iterationUtil.useStream           avgt    5  17.118 ±  3.642  ns/op
